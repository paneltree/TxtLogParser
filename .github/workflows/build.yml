name: Build TxtLogParser

on:
  push:
    branches: [ main, dev ] # Added dev branch for your recent work
  pull_request:
    branches: [ main, dev ]

env:
  QT_VERSION: '6.8.3'
  CMAKE_VERSION: '3.28' # Updated to a specific version for reliability
  BUILD_TYPE: Release

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: gcc_64
            artifact_path: build/TxtLogParser
            artifact_name: TxtLogParser-Ubuntu
          - os: windows-latest
            arch: msvc2019_64
            artifact_path: build/deploy/**
            artifact_name: TxtLogParser-Windows
          - os: macos-latest
            arch: clang_64
            artifact_path: build/TxtLogParser.dmg
            artifact_name: TxtLogParser-macOS
      fail-fast: false # Allows other platforms to continue if one fails
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libx11-dev libxext-dev libxcb1-dev ninja-build

    - name: Install Chocolatey for Windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    - name: Set up CMake
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ${{ env.CMAKE_VERSION }}

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/Qt
        key: ${{ matrix.os }}-qt-${{ env.QT_VERSION }}-${{ matrix.arch }}
        restore-keys: ${{ matrix.os }}-qt-${{ env.QT_VERSION }}-

    - name: Install Qt
      uses: jurplel/install-qt-action@v4 # Updated to v4
      with:
        version: ${{ env.QT_VERSION }}
        target: desktop
        arch: ${{ matrix.arch }}
        dir: ${{ runner.temp }}/Qt
        cache: ${{ steps.cache-qt.outputs.cache-hit }} # Changed to `cache` as per v4

    - name: Configure CMake
      run: |
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DQT_DIR=${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/${{ matrix.arch }}
      shell: bash # Ensures consistent shell across platforms

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} --parallel
      shell: bash

    - name: Deploy Windows
      if: matrix.os == 'windows-latest'
      run: |
        $env:Path += ";${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/msvc2019_64/bin"
        windeployqt build/TxtLogParser.exe --dir build/deploy
      shell: pwsh

    - name: Deploy macOS
      if: matrix.os == 'macos-latest'
      run: |
        macdeployqt build/TxtLogParser.app -dmg -verbose=2
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_path }}
        retention-days: 7 # Optional: Reduces storage costs

    - name: Run tests
      if: matrix.os != 'windows-latest' # Placeholder until Windows tests are ready
      run: |
        ctest --test-dir build --output-on-failure
      continue-on-error: true # Allows test failures during development
      shell: bash